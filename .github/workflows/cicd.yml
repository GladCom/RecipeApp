name: Build, Release and Publish Docker

on:
  push:
    branches:
      - master

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dezodemius/recipeapp

jobs:
  checkout_code:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get commit SHA
        id: get_sha
        run: echo "sha=${{ github.sha }}" >> "$GITHUB_OUTPUT"

  generate_version:
    runs-on: ubuntu-latest
    needs: checkout_code
    outputs:
      version: ${{ steps.tag_version.outputs.version }}
    steps:
      - name: Calculate version tag
        id: tag_version
        run: |
          YEAR=$(date +'%Y')
          MONTH=$(date +'%m')
          BUILD_NUMBER=${{ github.run_number }}
          VERSION=$(printf "%s.%s.%03d" "$YEAR" "$MONTH" "$BUILD_NUMBER")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Generated version: $VERSION"

  build_app:
    runs-on: ubuntu-latest
    needs: [checkout_code, generate_version]
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./RecipeApp/RecipeApp.sln

      - name: Build the project
        run: dotnet build ./RecipeApp/RecipeApp.sln --configuration Release --no-restore

      - name: Publish app
        run: dotnet publish ./RecipeApp/RecipeApp.sln --configuration Release -o ./publish

      - name: Upload published app
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: ./publish

  run_tests:
    runs-on: ubuntu-latest
    needs: build_app
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Run tests
        run: dotnet test ./RecipeApp/RecipeApp.sln --configuration Release --no-restore --verbosity normal

  release_docker_and_create_tag:
    runs-on: ubuntu-latest
    needs: [build_app, run_tests, generate_version]
    if: success()
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download published app
        uses: actions/download-artifact@v5
        with:
          name: published-app
          path: ./publish

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
                       -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate_version.outputs.version }} \
                       -f ./RecipeApp/RecipeApp/Dockerfile ./publish

      - name: Push Docker image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate_version.outputs.version }}

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create git tag and push
        run: |
          git tag ${{ needs.generate_version.outputs.version }}
          git push origin ${{ needs.generate_version.outputs.version }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate_version.outputs.version }}
          name: Release ${{ needs.generate_version.outputs.version }}
          body: |
            Docker image available at:
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            - `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.generate_version.outputs.version }}`
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}